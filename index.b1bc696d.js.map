{"mappings":"AAWA,MAAMA,EAAWC,SAASC,cAAc,iBAClCC,EAAeF,SAASC,cAAc,aACtCE,EAAWH,SAASC,cAAc,WAGlCG,GAFUJ,SAASC,cAAc,UAEjB,ICZP,MAO0GI,cACrH,OAAOC,MAAM,qHACVC,MAAKC,IACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAE3B,OAAOH,EAASI,MAAM,IAEvBL,MAAKM,GACGA,IAERC,OAAMC,GAAOC,QAAQC,IAAIF,I,CAK9BG,kBACE,OAAOZ,MACL,sIAAyDa,KAAKC,WAE7Db,MAAKC,IACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAE3B,OAAOH,EAASI,MAAM,IAEvBL,MAAKM,GACGA,IAERC,OAAMC,GAAOC,QAAQC,IAAIF,I,CAnC9BM,cACEF,KAAKC,QAAU,E,IDYnBrB,EAASuB,iBAAiB,SAcqE,SAA7EC,GAChBpB,EAASqB,UAAUC,OAAO,aAC1BvB,EAAawB,UAAY,GAEzBtB,EAAcgB,QAAUG,EAAII,OAAOC,MAEnCxB,EAAcc,kBAAkBX,MAAKM,IACnCV,EAASqB,UAAUK,IAAI,aACvB3B,EAAawB,UAAyBb,EAQrCiB,KACC,EAAGC,IAAKC,EAAGC,OAAEA,KACX,iCAAiCD,WAAaC,EAAO,GAAGC,6EAEpDD,EAAO,GAAGC,wCACMD,EAAO,GAAGE,qCACdF,EAAO,GAAGG,mEACeH,EAAO,GAAGI,iEACZJ,EAAO,GAAGK,wBAEpDC,KAAK,GAlBqC,G,IAlBqInC,EAAtKC,cAAcE,MAAKM,IAC/BV,EAASqB,UAAUK,IAAI,aAChBhB,EAAK2B,SAAQ,EAACC,GAAEA,EAAEP,KAAEA,MACzB,IAAIQ,EAAY,IAAIC,OAAOT,EAAMO,GACjC1C,EAAS6C,OAAOF,EAAU","sources":["src/index.js","src/cat-api.js"],"sourcesContent":["// Создай фронтенд часть приложения поиска информации о коте по его породе.\n\n// 1. Используй публичный The Cat API.\n// Рекомендуется использовать axios и добавить заголовок для всех запросов.\n\n// import axios from 'axios';\n// axios.defaults.baseURL = 'https://api.thecatapi.com/v1';\n// axios.defaults.headers.common['x-api-key'] = \"твой ключ\";\n\nimport CatApiService from './cat-api';\n\nconst selectEl = document.querySelector('.breed-select');\nconst catContainer = document.querySelector('.cat-info');\nconst loaderEl = document.querySelector('.loader');\nconst errorEl = document.querySelector('.error');\n\nconst catApiService = new CatApiService();\n\nselectEl.addEventListener('input', onSelect);\n\n// 3. При загрузке страницы должен выполняться HTTP-запрос за коллекцией пород. При успешном запросе, необходимо наполнить select.breed-select опциями так, чтобы value опции содержал id породы, а в интерфейсе пользователю отображалось название породы.\n\ncatApiService.fetchBreeds().then(data => {\n  loaderEl.classList.add('is-hidden');\n  return data.forEach(({ id, name }) => {\n    let newOption = new Option(name, id);\n    selectEl.append(newOption);\n  });\n});\n\n// 5. Когда пользователь выбирает опцию в селекте, необходимо выполнять запрос за полной информацией о коте на ресурс https://api.thecatapi.com/v1/images/search.\n\nfunction onSelect(evt) {\n  loaderEl.classList.remove('is-hidden');\n  catContainer.innerHTML = '';\n\n  catApiService.breedId = evt.target.value;\n\n  catApiService.fetchCatByBreed().then(data => {\n    loaderEl.classList.add('is-hidden');\n    catContainer.innerHTML = createMarkup(data);\n  });\n}\n\n// 7. Если запрос был успешный, под селектом, в блоке div.cat-info появляется изображение и развернутая информация о коте: название породы, описание и темперамент.\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      ({ url: img, breeds }) =>\n        `<div class =\"thumb\"><img src=\"${img}\" alt=\"${breeds[0].name}\" class=\"img\" /></div>\n      <div class=\"text-container\">\n      <h2>${breeds[0].name}</h2>\n      <p class=\"subtitle\">${breeds[0].origin}</p>\n      <p class=\"text\">${breeds[0].description}</p>\n      <p class=\"text\"><span>Temperament:</span>${breeds[0].temperament}</p>\n      <p class=\"text\"><span>Life span:</span>${breeds[0].life_span} years</p>`\n    )\n    .join('');\n}\n\n// Обработка состояния загрузки\n// Пока идет любой HTTP-запрос, необходимо показывать загрузчик - элемент p.loader. Пока запросов нет или когда запрос завершился, загрузчик необходимо скрывать. Используй для этого дополнительные CSS классы.\n\n// Пока идет запрос за списком пород, необходимо скрыть select.breed-select и показать p.loader.\n\n// Пока идет запрос за инфорацией о коте, необходимо скрыть div.cat-info и показать p.loader.\n\n// Когда любой запрос завершился, p.loader необходимо скрыть\n","const BASE_URL = 'https://api.thecatapi.com/v1/';\nconst API_KEY =\n  'live_PdAupx8zeAfGwmA0Usl71dWW8CCCHLe1lcHgLH5IMiTqvWGKEfsMBKJmDkUjtR84';\n\nexport default class CatApiService {\n  constructor() {\n    this.breedId = '';\n  }\n\n  // 4. Напиши функцию fetchBreeds() которая делает HTTP-запрос и возвращает промис с массивом пород - результатом запроса. Вынеси её в файл cat-api.js и сделай именованный экспорт.\n\n  fetchBreeds() {\n    return fetch(`${BASE_URL}breeds?api_key=${API_KEY}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(data => {\n        return data;\n      })\n      .catch(err => console.log(err));\n  }\n\n  // 6. Напиши функцию fetchCatByBreed(breedId) которая ожидает идентификатор породы, делает HTTP-запрос и возвращает промис с данными о коте - результатом запроса. Вынеси её в файл cat-api.js и сделай именованный экспорт.\n\n  fetchCatByBreed() {\n    return fetch(\n      `${BASE_URL}images/search?api_key=${API_KEY}&breed_ids=${this.breedId}`\n    )\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(data => {\n        return data;\n      })\n      .catch(err => console.log(err));\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$selectEl","document","querySelector","$1f0dc3b9307be026$var$catContainer","$1f0dc3b9307be026$var$loaderEl","$1f0dc3b9307be026$var$catApiService","fetchBreeds","fetch","then","response","ok","Error","statusText","json","data","catch","err","console","log","fetchCatByBreed","this","breedId","constructor","addEventListener","evt","classList","remove","innerHTML","target","value","add","map","url","img","breeds","name","origin","description","temperament","life_span","join","forEach","id","newOption","Option","append"],"version":3,"file":"index.b1bc696d.js.map"}